# 工作流名称
name: Build and Download Image Artifact

# 只保留手动触发，并让用户选择平台
on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: '请选择要构建的镜像平台'
        required: true
        default: 'linux/amd64'
        options: 
        - linux/amd64
        - linux/arm64
        - linux/arm/v7

jobs:
  build-and-download:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 新增步骤：准备一个安全的、无斜杠的平台名称 ---
      - name: Prepare sanitized platform name
        id: vars
        run: |
          # 使用 shell 语法将输入中的 '/' 替换为 '-'
          # 例如，将 'linux/arm/v7' 转换为 'linux-arm-v7'
          # 然后将结果保存到后续步骤可以使用的输出变量中
          INPUT_PLATFORM="${{ github.event.inputs.platform }}"
          echo "CLEAN_PLATFORM=${INPUT_PLATFORM//\//-}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # --- 第 1 处修改：使用新准备的安全变量 ---
          images: local/gateway-${{ steps.vars.outputs.CLEAN_PLATFORM }}
          tags: type=raw,value=latest

      - name: Build image and export to tarball
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ github.event.inputs.platform }}
          push: false
          outputs: type=docker,dest=/tmp/image.tar
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          # --- 第 2 处修改：同样使用新准备的安全变量 ---
          name: docker-image-${{ runner.os }}-${{ steps.vars.outputs.CLEAN_PLATFORM }}
          path: /tmp/image.tar
          retention-days: 7
